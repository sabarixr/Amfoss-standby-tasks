1. Write an assert statement that triggers an AssertionError if the variable spam is an integer less than 10.

Answer:
        assert spam >= 10, 'The spam variable is less than 10

2. Write an assert statement that triggers an AssertionError if the variables eggs and bacon contain strings that are the same as each other, even if their cases are different (that is, 'hello' and 'hello' are considered the same, and 'goodbye' and 'GOODbye' are also considered the same).

Answer:
        assert eggs.lower() != bacon.lower(), "The eggs and bacon variables are the same"


3. Write an assert statement that always triggers an AssertionError.

Answer:
        assert False, "This assert statement always triggers an AssertionError."


4. What are the two lines that your program must have in order to be able to call logging.debug()?

Answer:
       import logging
logging.basicConfig(level=logging.DEBUG, format=' %(asctime)s - %(levelname)s -  %(message)s')

5. What are the two lines that your program must have in order to have logging.debug() send a logging message to a file named programLog.txt?

Answer:
        import logging
        logging.basicConfig(filename='programLog.txt', level=logging.DEBUG, format=' %(asctime)s -  %(levelname)s -  %(message)s')

6. What are the five logging levels?

Answer:
        debug
        info
        critical
        waring
        error

7. What line of code can you add to disable all logging messages in your program?

Answer:
        for debugging all logging method :
        logging.disable(logging.CRITICAL)

8. Why is using logging messages better than using print() to display the same message?

Answer:
        can be easily disabled where you can choose which level it also provides time stamp.

9. What are the differences between the Step Over, Step In, and Step Out buttons in the debugger?

Answer:
        Step Over - Move to next line after executing the current line of same function.
        Step In   - move debugger into a function call
        Step Out  - Step out of the function after executing the remaining lines.

10. After you click Continue, when will the debugger stop?

Answer:
        It will stop whenever it reaches a break point or the end of th program.

11. What is a breakpoint?

Answer:
        Setting which makes the debugger stops its execution

12. How do you set a breakpoint on a line of code in Mu?

Answer:
        clicking on the line no add breakpoint
        P.S.I only used my editor for this task  rest was pycham